// <auto-generated />
using System;
using CompanySystem.Data.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CompanySystem.Data.Migrations
{
    [DbContext(typeof(CompanyDbContext))]
    partial class CompanyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("CompanySystem.Data.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("DepartmentId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("DepartmentId");

                    b.HasIndex("DepartmentName")
                        .IsUnique();

                    b.HasIndex("ManagerId");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            DepartmentId = 1,
                            CreatedDate = new DateTime(2025, 7, 31, 22, 36, 58, 21, DateTimeKind.Utc).AddTicks(3704),
                            DepartmentName = "IT"
                        },
                        new
                        {
                            DepartmentId = 2,
                            CreatedDate = new DateTime(2025, 7, 31, 22, 36, 58, 21, DateTimeKind.Utc).AddTicks(3706),
                            DepartmentName = "HR"
                        },
                        new
                        {
                            DepartmentId = 3,
                            CreatedDate = new DateTime(2025, 7, 31, 22, 36, 58, 21, DateTimeKind.Utc).AddTicks(3707),
                            DepartmentName = "Finance"
                        },
                        new
                        {
                            DepartmentId = 4,
                            CreatedDate = new DateTime(2025, 7, 31, 22, 36, 58, 21, DateTimeKind.Utc).AddTicks(3708),
                            DepartmentName = "Operations"
                        });
                });

            modelBuilder.Entity("CompanySystem.Data.Models.MainPageContent", b =>
                {
                    b.Property<int>("ContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ContentId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("SectionName")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("UpdatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("ContentId");

                    b.HasIndex("SectionName")
                        .IsUnique();

                    b.HasIndex("UpdatedById");

                    b.ToTable("MainPageContent");

                    b.HasData(
                        new
                        {
                            ContentId = 1,
                            Content = "Welcome to our company management system.",
                            CreatedDate = new DateTime(2025, 7, 31, 22, 36, 58, 21, DateTimeKind.Utc).AddTicks(3722),
                            SectionName = 1,
                            Title = "Company Overview",
                            UpdatedById = 1,
                            UpdatedDate = new DateTime(2025, 7, 31, 22, 36, 58, 21, DateTimeKind.Utc).AddTicks(3723)
                        },
                        new
                        {
                            ContentId = 2,
                            Content = "We are a leading company in our industry.",
                            CreatedDate = new DateTime(2025, 7, 31, 22, 36, 58, 21, DateTimeKind.Utc).AddTicks(3725),
                            SectionName = 2,
                            Title = "About Us",
                            UpdatedById = 1,
                            UpdatedDate = new DateTime(2025, 7, 31, 22, 36, 58, 21, DateTimeKind.Utc).AddTicks(3726)
                        },
                        new
                        {
                            ContentId = 3,
                            Content = "We provide comprehensive business solutions.",
                            CreatedDate = new DateTime(2025, 7, 31, 22, 36, 58, 21, DateTimeKind.Utc).AddTicks(3728),
                            SectionName = 3,
                            Title = "Our Services",
                            UpdatedById = 1,
                            UpdatedDate = new DateTime(2025, 7, 31, 22, 36, 58, 21, DateTimeKind.Utc).AddTicks(3728)
                        });
                });

            modelBuilder.Entity("CompanySystem.Data.Models.Note", b =>
                {
                    b.Property<int>("NoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("NoteId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("NoteType")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("NoteId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("CompanySystem.Data.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("RoleId");

                    b.HasIndex("RoleName")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            RoleName = "Administrator"
                        },
                        new
                        {
                            RoleId = 2,
                            RoleName = "HR"
                        },
                        new
                        {
                            RoleId = 3,
                            RoleName = "Lead"
                        },
                        new
                        {
                            RoleId = 4,
                            RoleName = "Employee"
                        });
                });

            modelBuilder.Entity("CompanySystem.Data.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Experience")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ProfilePhoto")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Skills")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("UserId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            CreatedDate = new DateTime(2025, 7, 31, 22, 36, 58, 21, DateTimeKind.Utc).AddTicks(3688),
                            Email = "admin@company.com",
                            EmployeeId = "ADMIN001",
                            FirstName = "System",
                            HireDate = new DateTime(2025, 7, 31, 22, 36, 58, 21, DateTimeKind.Utc).AddTicks(3687),
                            IsActive = true,
                            LastName = "Administrator",
                            PasswordHash = "AQAAAAEAACcQAAAAEBv+X3w5V5yh3Z8bX0cX8+9YzGK8h7K2L1M6N9o0P3q4R7s8T5u6V9w0X3y6Z9a2B5c8",
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("CompanySystem.Data.Models.Department", b =>
                {
                    b.HasOne("CompanySystem.Data.Models.User", "Manager")
                        .WithMany("ManagedDepartments")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("CompanySystem.Data.Models.MainPageContent", b =>
                {
                    b.HasOne("CompanySystem.Data.Models.User", "UpdatedBy")
                        .WithMany("ContentUpdates")
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("CompanySystem.Data.Models.Note", b =>
                {
                    b.HasOne("CompanySystem.Data.Models.User", "CreatedBy")
                        .WithMany("NotesCreatedByEmployee")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CompanySystem.Data.Models.User", "Employee")
                        .WithMany("NotesAboutEmployee")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("CompanySystem.Data.Models.User", b =>
                {
                    b.HasOne("CompanySystem.Data.Models.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CompanySystem.Data.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CompanySystem.Data.Models.Department", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("CompanySystem.Data.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("CompanySystem.Data.Models.User", b =>
                {
                    b.Navigation("ContentUpdates");

                    b.Navigation("ManagedDepartments");

                    b.Navigation("NotesAboutEmployee");

                    b.Navigation("NotesCreatedByEmployee");
                });
#pragma warning restore 612, 618
        }
    }
}
