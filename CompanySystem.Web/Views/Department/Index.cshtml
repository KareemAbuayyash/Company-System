@model IEnumerable<CompanySystem.Web.ViewModels.DepartmentViewModel>

@{
    ViewData["Title"] = "Departments";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2 class="mb-0">
                    <i class="fas fa-building"></i>
                    Department Management
                    @if (ViewBag.TotalDepartments != null)
                    {
                        <span class="badge bg-secondary ms-2">@ViewBag.TotalDepartments</span>
                    }
                </h2>
                <a href="@Url.Action("Create", "Department")" class="btn btn-primary">
                    <i class="fas fa-plus"></i>
                    Add New Department
                </a>
            </div>

            <!-- Search and Filter Section -->
            <div class="card mb-4">
                <div class="card-body">
                    <form method="get" action="@Url.Action("Index", "Department")" id="searchForm">
                        <div class="row align-items-end">
                            <div class="col-md-6">
                                <label for="searchTerm" class="form-label">
                                    <i class="fas fa-search"></i>
                                    Search Departments
                                </label>
                                <div class="input-group">
                                    <input type="text" 
                                           id="searchTerm" 
                                           name="searchTerm" 
                                           class="form-control" 
                                           placeholder="Start typing to search departments..." 
                                           value="@ViewBag.SearchTerm"
                                           autocomplete="off">
                                    <button type="button" id="clearSearch" class="btn btn-outline-secondary" style="display: none;">
                                        <i class="fas fa-times"></i>
                                    </button>
                                </div>
                                <div class="form-text">
                                    <span id="searchStatus">Type to search...</span>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <label for="sortBy" class="form-label">
                                    <i class="fas fa-sort"></i>
                                    Sort By
                                </label>
                                <select id="sortBy" name="sortBy" class="form-select">
                                    <option value="name" selected="@(ViewBag.SortBy == "name")">Name (A-Z)</option>
                                    <option value="name_desc" selected="@(ViewBag.SortBy == "name_desc")">Name (Z-A)</option>
                                    <option value="date" selected="@(ViewBag.SortBy == "date")">Created Date (Oldest)</option>
                                    <option value="date_desc" selected="@(ViewBag.SortBy == "date_desc")">Created Date (Newest)</option>
                                    <option value="creator" selected="@(ViewBag.SortBy == "creator")">Creator (A-Z)</option>
                                    <option value="creator_desc" selected="@(ViewBag.SortBy == "creator_desc")">Creator (Z-A)</option>
                                </select>
                            </div>
                            <div class="col-md-2">
                                <div class="d-grid gap-2">
                                    <button type="submit" class="btn btn-outline-primary" id="searchBtn">
                                        <i class="fas fa-filter"></i>
                                        Search
                                    </button>
                                    @if (!string.IsNullOrEmpty(ViewBag.SearchTerm as string))
                                    {
                                        <a href="@Url.Action("Index", "Department")" class="btn btn-outline-secondary btn-sm">
                                            <i class="fas fa-refresh"></i>
                                            Reset
                                        </a>
                                    }
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
            </div>

            @if (TempData["SuccessMessage"] != null)
            {
                <div class="alert alert-success alert-dismissible fade show" role="alert">
                    <i class="fas fa-check-circle"></i>
                    @TempData["SuccessMessage"]
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            }

            @if (TempData["ErrorMessage"] != null)
            {
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    <i class="fas fa-exclamation-circle"></i>
                    @TempData["ErrorMessage"]
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            }

            <div class="card">
                @if (!string.IsNullOrEmpty(ViewBag.SearchTerm as string))
                {
                    <div class="card-header">
                        <div class="d-flex justify-content-between align-items-center">
                            <span>
                                <i class="fas fa-search"></i>
                                Search results for: <strong>"@ViewBag.SearchTerm"</strong>
                            </span>
                            <span class="badge bg-info">@ViewBag.TotalDepartments result(s)</span>
                        </div>
                    </div>
                }
                <div class="card-body">
                    <div id="loadingIndicator" style="display: none;" class="text-center py-3">
                        <i class="fas fa-spinner fa-spin"></i>
                        <span class="ms-2">Searching...</span>
                    </div>
                    
                    <div id="departmentResults">
                    @if (Model.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-striped table-hover">
                                <thead class="table-dark">
                                    <tr>
                                        <th>
                                            <a href="@Url.Action("Index", "Department", new { searchTerm = ViewBag.SearchTerm, sortBy = (ViewBag.SortBy == "name" ? "name_desc" : "name") })" 
                                               class="text-white text-decoration-none">
                                                @Html.DisplayNameFor(model => model.DepartmentName)
                                                @if (ViewBag.SortBy == "name")
                                                {
                                                    <i class="fas fa-sort-up"></i>
                                                }
                                                else if (ViewBag.SortBy == "name_desc")
                                                {
                                                    <i class="fas fa-sort-down"></i>
                                                }
                                                else
                                                {
                                                    <i class="fas fa-sort"></i>
                                                }
                                            </a>
                                        </th>
                                        <th>
                                            <a href="@Url.Action("Index", "Department", new { searchTerm = ViewBag.SearchTerm, sortBy = (ViewBag.SortBy == "creator" ? "creator_desc" : "creator") })" 
                                               class="text-white text-decoration-none">
                                                @Html.DisplayNameFor(model => model.CreatedBy)
                                                @if (ViewBag.SortBy == "creator")
                                                {
                                                    <i class="fas fa-sort-up"></i>
                                                }
                                                else if (ViewBag.SortBy == "creator_desc")
                                                {
                                                    <i class="fas fa-sort-down"></i>
                                                }
                                                else
                                                {
                                                    <i class="fas fa-sort"></i>
                                                }
                                            </a>
                                        </th>
                                        <th>
                                            <a href="@Url.Action("Index", "Department", new { searchTerm = ViewBag.SearchTerm, sortBy = (ViewBag.SortBy == "date" ? "date_desc" : "date") })" 
                                               class="text-white text-decoration-none">
                                                @Html.DisplayNameFor(model => model.CreatedDate)
                                                @if (ViewBag.SortBy == "date")
                                                {
                                                    <i class="fas fa-sort-up"></i>
                                                }
                                                else if (ViewBag.SortBy == "date_desc")
                                                {
                                                    <i class="fas fa-sort-down"></i>
                                                }
                                                else
                                                {
                                                    <i class="fas fa-sort"></i>
                                                }
                                            </a>
                                        </th>
                                        <th class="text-center">Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in Model)
                                    {
                                        <tr>
                                            <td>
                                                <strong>@Html.DisplayFor(modelItem => item.DepartmentName)</strong>
                                            </td>
                                            <td>@Html.DisplayFor(modelItem => item.CreatedBy)</td>
                                            <td>@item.CreatedDate.ToString("dd/MM/yyyy HH:mm")</td>
                                            <td class="text-center">
                                                <div class="btn-group btn-group-sm" role="group">
                                                    <a href="@Url.Action("Details", "Department", new { id = item.DepartmentId })" 
                                                       class="btn btn-info btn-sm" title="View Details">
                                                        <i class="fas fa-eye"></i>
                                                    </a>
                                                    <a href="@Url.Action("Edit", "Department", new { id = item.DepartmentId })" 
                                                       class="btn btn-warning btn-sm" title="Edit">
                                                        <i class="fas fa-edit"></i>
                                                    </a>
                                                    <a href="@Url.Action("Delete", "Department", new { id = item.DepartmentId })" 
                                                       class="btn btn-danger btn-sm" title="Delete">
                                                        <i class="fas fa-trash"></i>
                                                    </a>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-5">
                            @if (!string.IsNullOrEmpty(ViewBag.SearchTerm as string))
                            {
                                <i class="fas fa-search fa-3x text-muted mb-3"></i>
                                <h4 class="text-muted">No Departments Found</h4>
                                <p class="text-muted">
                                    No departments match your search term "<strong>@ViewBag.SearchTerm</strong>".
                                    <br>Try a different search term or 
                                    <a href="@Url.Action("Index", "Department")" class="text-decoration-none">clear the search</a>.
                                </p>
                            }
                            else
                            {
                                <i class="fas fa-building fa-3x text-muted mb-3"></i>
                                <h4 class="text-muted">No Departments Found</h4>
                                <p class="text-muted">Get started by creating your first department.</p>
                                <a href="@Url.Action("Create", "Department")" class="btn btn-primary">
                                    <i class="fas fa-plus"></i>
                                    Create First Department
                                </a>
                            }
                        </div>
                    }
                    </div> <!-- End departmentResults -->
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <style>
        mark {
            background-color: #fff3cd;
            padding: 1px 2px;
            border-radius: 2px;
        }
        
        .sortable-header {
            cursor: pointer;
            user-select: none;
        }
        
        .sortable-header:hover {
            background-color: rgba(255, 255, 255, 0.1);
        }
        
        .search-info {
            font-size: 0.9em;
            color: #6c757d;
        }
        
        .table th a {
            display: block;
            padding: 0.5rem;
            margin: -0.5rem;
        }

        .fade-in {
            animation: fadeIn 0.3s ease-in;
        }

        @@keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
    </style>
    
    <script>
        // Enhanced Department Search with AJAX
        class DepartmentSearch {
            constructor() {
                this.searchInput = document.getElementById('searchTerm');
                this.sortSelect = document.getElementById('sortBy');
                this.clearBtn = document.getElementById('clearSearch');
                this.loadingIndicator = document.getElementById('loadingIndicator');
                this.resultsContainer = document.getElementById('departmentResults');
                this.searchStatus = document.getElementById('searchStatus');
                this.searchForm = document.getElementById('searchForm');
                
                this.searchTimeout = null;
                this.currentRequest = null;
                this.lastSearchTerm = '';
                this.lastSortBy = 'name';
                
                this.init();
            }

            init() {
                // Auto-hide alerts
                setTimeout(() => {
                    document.querySelectorAll('.alert').forEach(alert => {
                        alert.style.transition = 'opacity 0.5s';
                        alert.style.opacity = '0';
                        setTimeout(() => alert.remove(), 500);
                    });
                }, 5000);

                // Search input events
                this.searchInput.addEventListener('input', () => this.handleSearchInput());
                this.searchInput.addEventListener('focus', () => this.updateSearchStatus('Type to search...'));
                
                // Sort change event
                this.sortSelect.addEventListener('change', () => this.performSearch());
                
                // Clear button
                this.clearBtn.addEventListener('click', () => this.clearSearch());
                
                // Form submit prevention (we use AJAX)
                this.searchForm.addEventListener('submit', (e) => {
                    e.preventDefault();
                    this.performSearch();
                });

                // Keyboard shortcuts
                document.addEventListener('keydown', (e) => {
                    if (e.key === 'Escape' && this.searchInput.value) {
                        this.clearSearch();
                    }
                    if (e.ctrlKey && e.key === 'k') {
                        e.preventDefault();
                        this.searchInput.focus();
                    }
                });

                // Initialize UI state
                this.updateClearButton();
                this.updateSearchStatus('Ready');
            }

            handleSearchInput() {
                const searchTerm = this.searchInput.value.trim();
                this.updateClearButton();
                
                // Clear existing timeout
                if (this.searchTimeout) {
                    clearTimeout(this.searchTimeout);
                }

                // Cancel ongoing request if search term changed significantly
                if (this.currentRequest && Math.abs(searchTerm.length - this.lastSearchTerm.length) > 3) {
                    this.currentRequest.abort();
                    this.currentRequest = null;
                }

                // Debounce search - now searches from first character
                this.searchTimeout = setTimeout(() => {
                    if (searchTerm !== this.lastSearchTerm) {
                        this.performSearch();
                    }
                }, 200); // Reduced to 200ms for faster response with single character

                // Update status immediately
                if (searchTerm.length === 0) {
                    this.updateSearchStatus('Type to search...');
                } else {
                    this.updateSearchStatus('Searching...');
                }
            }

            async performSearch() {
                const searchTerm = this.searchInput.value.trim();
                const sortBy = this.sortSelect.value;

                // Cancel previous request
                if (this.currentRequest) {
                    this.currentRequest.abort();
                }

                this.showLoading(true);
                this.updateSearchStatus('Searching...');

                try {
                    // Create AbortController for this request
                    const controller = new AbortController();
                    this.currentRequest = controller;

                    const url = new URL('@Url.Action("SearchDepartments", "Department")', window.location.origin);
                    if (searchTerm) url.searchParams.append('searchTerm', searchTerm);
                    url.searchParams.append('sortBy', sortBy);

                    const response = await fetch(url, {
                        signal: controller.signal,
                        headers: {
                            'X-Requested-With': 'XMLHttpRequest'
                        }
                    });

                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }

                    const result = await response.json();
                    
                    if (result.success) {
                        this.renderResults(result.data, result.searchTerm, result.count);
                        if (searchTerm.length === 0) {
                            this.updateSearchStatus('Showing all departments');
                        } else {
                            this.updateSearchStatus(`Found ${result.count} department(s) matching "${searchTerm}"`);
                        }
                        this.lastSearchTerm = searchTerm;
                        this.lastSortBy = sortBy;
                        
                        // Update URL without page reload
                        this.updateUrl(searchTerm, sortBy);
                    } else {
                        throw new Error('Search failed');
                    }

                } catch (error) {
                    if (error.name !== 'AbortError') {
                        console.error('Search error:', error);
                        this.updateSearchStatus('Search failed. Please try again.');
                        this.showError('An error occurred while searching. Please try again.');
                    }
                } finally {
                    this.showLoading(false);
                    this.currentRequest = null;
                }
            }

            renderResults(departments, searchTerm, count) {
                if (departments.length === 0) {
                    this.renderEmptyState(searchTerm);
                    return;
                }

                const tableHtml = `
                    <div class="table-responsive fade-in">
                        <table class="table table-striped table-hover">
                            <thead class="table-dark">
                                <tr>
                                    <th><a href="#" onclick="departmentSearch.sortBy('name')" class="text-white text-decoration-none">Department Name <i class="fas fa-sort"></i></a></th>
                                    <th><a href="#" onclick="departmentSearch.sortBy('creator')" class="text-white text-decoration-none">Created By <i class="fas fa-sort"></i></a></th>
                                    <th><a href="#" onclick="departmentSearch.sortBy('date')" class="text-white text-decoration-none">Created Date <i class="fas fa-sort"></i></a></th>
                                    <th class="text-center">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${departments.map(dept => `
                                    <tr>
                                        <td><strong>${this.highlightText(dept.departmentName, searchTerm)}</strong></td>
                                        <td>${this.highlightText(dept.createdBy, searchTerm)}</td>
                                        <td>${dept.createdDate}</td>
                                        <td class="text-center">
                                            <div class="btn-group btn-group-sm" role="group">
                                                <a href="@Url.Action("Details", "Department")?id=${dept.departmentId}" class="btn btn-info btn-sm" title="View Details">
                                                    <i class="fas fa-eye"></i>
                                                </a>
                                                <a href="@Url.Action("Edit", "Department")?id=${dept.departmentId}" class="btn btn-warning btn-sm" title="Edit">
                                                    <i class="fas fa-edit"></i>
                                                </a>
                                                <a href="@Url.Action("Delete", "Department")?id=${dept.departmentId}" class="btn btn-danger btn-sm" title="Delete">
                                                    <i class="fas fa-trash"></i>
                                                </a>
                                            </div>
                                        </td>
                                    </tr>
                                `).join('')}
                            </tbody>
                        </table>
                    </div>
                `;

                this.resultsContainer.innerHTML = tableHtml;
            }

            renderEmptyState(searchTerm) {
                const emptyHtml = `
                    <div class="text-center py-5 fade-in">
                        ${searchTerm ? `
                            <i class="fas fa-search fa-3x text-muted mb-3"></i>
                            <h4 class="text-muted">No Departments Found</h4>
                            <p class="text-muted">
                                No departments match your search term "<strong>${searchTerm}</strong>".
                                <br>Try a different search term or 
                                <a href="#" onclick="departmentSearch.clearSearch()" class="text-decoration-none">clear the search</a>.
                            </p>
                        ` : `
                            <i class="fas fa-building fa-3x text-muted mb-3"></i>
                            <h4 class="text-muted">No Departments Found</h4>
                            <p class="text-muted">Get started by creating your first department.</p>
                            <a href="@Url.Action("Create", "Department")" class="btn btn-primary">
                                <i class="fas fa-plus"></i>
                                Create First Department
                            </a>
                        `}
                    </div>
                `;
                this.resultsContainer.innerHTML = emptyHtml;
            }

            highlightText(text, searchTerm) {
                if (!searchTerm || searchTerm.length === 0) return text;
                const regex = new RegExp(`(${this.escapeRegex(searchTerm)})`, 'gi');
                return text.replace(regex, '<mark>$1</mark>');
            }

            escapeRegex(string) {
                return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
            }

            sortBy(field) {
                const currentSort = this.sortSelect.value;
                const newSort = currentSort === field ? `${field}_desc` : field;
                this.sortSelect.value = newSort;
                this.performSearch();
            }

            clearSearch() {
                this.searchInput.value = '';
                this.sortSelect.value = 'name';
                this.updateClearButton();
                this.updateSearchStatus('Ready');
                
                // Reload page to show all departments
                window.location.href = '@Url.Action("Index", "Department")';
            }

            updateClearButton() {
                const hasValue = this.searchInput.value.trim().length > 0;
                this.clearBtn.style.display = hasValue ? 'block' : 'none';
            }

            updateSearchStatus(message) {
                this.searchStatus.textContent = message;
            }

            showLoading(show) {
                this.loadingIndicator.style.display = show ? 'block' : 'none';
            }

            showError(message) {
                // You could implement a toast notification here
                console.error(message);
            }

            updateUrl(searchTerm, sortBy) {
                const url = new URL(window.location);
                if (searchTerm) {
                    url.searchParams.set('searchTerm', searchTerm);
                } else {
                    url.searchParams.delete('searchTerm');
                }
                url.searchParams.set('sortBy', sortBy);
                window.history.replaceState({}, '', url);
            }
        }

        // Initialize when DOM is ready
        let departmentSearch;
        document.addEventListener('DOMContentLoaded', () => {
            departmentSearch = new DepartmentSearch();
        });
    </script>
}
